import boto3
import time
import os

region = 'us-east-1'  # Change to your preferred region
key_pair_name = 'AutoGeneratedKeyPair'
key_file_name = f"{key_pair_name}.pem"

ec2 = boto3.client('ec2', region_name=region)

# 1️⃣ Check if Key Pair exists
existing_keys = ec2.describe_key_pairs()['KeyPairs']
key_names = [key['KeyName'] for key in existing_keys]

if key_pair_name not in key_names:
    print(f"🔐 Key pair '{key_pair_name}' not found. Creating it now...")

    key_response = ec2.create_key_pair(KeyName=key_pair_name)
    private_key = key_response['KeyMaterial']

    with open(key_file_name, 'w') as file:
        file.write(private_key)

    os.chmod(key_file_name, 0o400)
    print(f"✅ Key pair created and saved as {key_file_name}")
else:
    print(f"✅ Key pair '{key_pair_name}' already exists. Proceeding...")

# 2️⃣ Create VPC
vpc_response = ec2.create_vpc(CidrBlock='10.0.0.0/16')
vpc_id = vpc_response['Vpc']['VpcId']
print(f"✅ Created VPC: {vpc_id}")

ec2.modify_vpc_attribute(VpcId=vpc_id, EnableDnsSupport={'Value': True})
ec2.modify_vpc_attribute(VpcId=vpc_id, EnableDnsHostnames={'Value': True})

# 3️⃣ Create Subnet
subnet_response = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.1.0/24')
subnet_id = subnet_response['Subnet']['SubnetId']
print(f"✅ Created Subnet: {subnet_id}")

# 4️⃣ Create Internet Gateway
igw_response = ec2.create_internet_gateway()
igw_id = igw_response['InternetGateway']['InternetGatewayId']
print(f"✅ Created Internet Gateway: {igw_id}")

# Attach IGW to VPC
ec2.attach_internet_gateway(InternetGatewayId=igw_id, VpcId=vpc_id)

# 5️⃣ Create Route Table
rt_response = ec2.create_route_table(VpcId=vpc_id)
rt_id = rt_response['RouteTable']['RouteTableId']
print(f"✅ Created Route Table: {rt_id}")

# Add route to IGW
ec2.create_route(RouteTableId=rt_id, DestinationCidrBlock='0.0.0.0/0', GatewayId=igw_id)

# Associate route table with subnet
ec2.associate_route_table(RouteTableId=rt_id, SubnetId=subnet_id)

# 6️⃣ Create Security Group
sg_response = ec2.create_security_group(
    GroupName='python-app-sg',
    Description='Security group for Python web apps',
    VpcId=vpc_id
)
sg_id = sg_response['GroupId']
print(f"✅ Created Security Group: {sg_id}")

# Authorize Ingress (SSH, App 1, App 2)
ec2.authorize_security_group_ingress(
    GroupId=sg_id,
    IpPermissions=[
        {'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},
        {'IpProtocol': 'tcp', 'FromPort': 5000, 'ToPort': 5000, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},
        {'IpProtocol': 'tcp', 'FromPort': 5001, 'ToPort': 5001, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},
    ]
)

# 7️⃣ User Data to install Python apps
user_data_script = """#!/bin/bash
sudo apt update -y
sudo apt install python3-pip -y
pip3 install flask

# App 1 on port 5000
echo "from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return 'Hello from App 1 on port 5000!'
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)" > /home/ubuntu/app1.py

# App 2 on port 5001
echo "from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return 'Hello from App 2 on port 5001!'
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)" > /home/ubuntu/app2.py

# Run both apps with nohup
nohup python3 /home/ubuntu/app1.py > /home/ubuntu/app1.log 2>&1 &
nohup python3 /home/ubuntu/app2.py > /home/ubuntu/app2.log 2>&1 &
"""

# 8️⃣ Launch EC2 instance
instance_response = ec2.run_instances(
    ImageId='ami-09ac0b140f63d3458',  # Ubuntu 22.04 LTS in ap-south-1
    InstanceType='t2.micro',
    KeyName=key_pair_name,
    MaxCount=1,
    MinCount=1,
    NetworkInterfaces=[{
        'SubnetId': subnet_id,
        'DeviceIndex': 0,
        'AssociatePublicIpAddress': True,
        'Groups': [sg_id]
    }],
    UserData=user_data_script
)

instance_id = instance_response['Instances'][0]['InstanceId']
print(f"✅ Launched EC2 Instance: {instance_id}")

# Wait for public IP
print("⏳ Waiting for public IP assignment...")
time.sleep(30)

# Get Public IP
instance_desc = ec2.describe_instances(InstanceIds=[instance_id])
public_ip = instance_desc['Reservations'][0]['Instances'][0]['PublicIpAddress']
print(f"\n🌐 Public IP: {public_ip}")

print(f"\n✅ Access your apps at:")
print(f"App 1 → http://{public_ip}:5000/")
print(f"App 2 → http://{public_ip}:5001/")
