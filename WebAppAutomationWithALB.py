import boto3
import time
import os

region = 'us-east-1'  # Change to your preferred region
key_pair_name = 'AutoGeneratedKeyPair'
key_file_name = f"{key_pair_name}.pem"

ec2 = boto3.client('ec2', region_name=region)
ec2_elb = boto3.client('elbv2', region_name=region)
ssm = boto3.client('ssm', region_name=region)

# Get latest Ubuntu 22.04 LTS AMI ID
ami_id = ssm.get_parameter(
    Name='/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
)['Parameter']['Value']
print(f"‚úÖ Latest Ubuntu AMI: {ami_id}")

# Key Pair creation (if not exists)
existing_keys = ec2.describe_key_pairs()['KeyPairs']
key_names = [key['KeyName'] for key in existing_keys]
if key_pair_name not in key_names:
    print(f"üîê Key pair '{key_pair_name}' not found. Creating it...")
    key_response = ec2.create_key_pair(KeyName=key_pair_name)
    if os.path.exists(key_file_name):
        os.remove(key_file_name)
    with open(key_file_name, 'w') as file:
        file.write(key_response['KeyMaterial'])
    os.chmod(key_file_name, 0o400)
    print(f"‚úÖ Key pair saved as {key_file_name}")
else:
    print(f"‚úÖ Key pair '{key_pair_name}' already exists.")

# Create VPC
vpc_id = ec2.create_vpc(CidrBlock='10.0.0.0/16')['Vpc']['VpcId']
ec2.modify_vpc_attribute(VpcId=vpc_id, EnableDnsSupport={'Value': True})
ec2.modify_vpc_attribute(VpcId=vpc_id, EnableDnsHostnames={'Value': True})
print(f"‚úÖ Created VPC: {vpc_id}")

# Get 2 available AZs
azs = ec2.describe_availability_zones()['AvailabilityZones']
az1 = azs[0]['ZoneName']
az2 = azs[1]['ZoneName']

# Create 2 Subnets in different AZs
subnet1_id = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.1.0/24', AvailabilityZone=az1)['Subnet']['SubnetId']
subnet2_id = ec2.create_subnet(VpcId=vpc_id, CidrBlock='10.0.2.0/24', AvailabilityZone=az2)['Subnet']['SubnetId']
print(f"‚úÖ Created Subnets: {subnet1_id}, {subnet2_id}")

# Create Internet Gateway and Route Table
igw_id = ec2.create_internet_gateway()['InternetGateway']['InternetGatewayId']
ec2.attach_internet_gateway(InternetGatewayId=igw_id, VpcId=vpc_id)
rt_id = ec2.create_route_table(VpcId=vpc_id)['RouteTable']['RouteTableId']
ec2.create_route(RouteTableId=rt_id, DestinationCidrBlock='0.0.0.0/0', GatewayId=igw_id)
ec2.associate_route_table(RouteTableId=rt_id, SubnetId=subnet1_id)
ec2.associate_route_table(RouteTableId=rt_id, SubnetId=subnet2_id)
print("‚úÖ Networking set up")

# Create Security Group
sg_id = ec2.create_security_group(
    GroupName='python-app-sg', Description='Security group for Python apps', VpcId=vpc_id
)['GroupId']

# Allow SSH and ALB app ports
ec2.authorize_security_group_ingress(
    GroupId=sg_id,
    IpPermissions=[
        {'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},
        {'IpProtocol': 'tcp', 'FromPort': 5000, 'ToPort': 5001, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},
    ]
)

# User Data for EC2 instance
user_data_script = """#!/bin/bash
sudo apt update -y
sudo apt install python3-pip -y
pip3 install flask

echo "from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return 'Hello from App 1 on port 5000!'
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)" > /home/ubuntu/app1.py

echo "from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return 'Hello from App 2 on port 5001!'
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)" > /home/ubuntu/app2.py

nohup python3 /home/ubuntu/app1.py > /home/ubuntu/app1.log 2>&1 &
nohup python3 /home/ubuntu/app2.py > /home/ubuntu/app2.log 2>&1 &
"""

# Launch EC2 instance
instance_id = ec2.run_instances(
    ImageId=ami_id,
    InstanceType='t2.micro',
    KeyName=key_pair_name,
    MaxCount=1,
    MinCount=1,
    NetworkInterfaces=[{
        'SubnetId': subnet1_id,
        'DeviceIndex': 0,
        'AssociatePublicIpAddress': True,
        'Groups': [sg_id]
    }],
    UserData=user_data_script
)['Instances'][0]['InstanceId']
print(f"‚úÖ Launched EC2 Instance: {instance_id}")

# Wait for EC2 to get ready
time.sleep(30)

# Create ALB across both subnets
alb_arn = ec2_elb.create_load_balancer(
    Name='python-app-alb',
    Subnets=[subnet1_id, subnet2_id],
    SecurityGroups=[sg_id],
    Scheme='internet-facing',
    Type='application',
    IpAddressType='ipv4'
)['LoadBalancers'][0]['LoadBalancerArn']

# Create 2 Target Groups (5000 & 5001)
tg_5000 = ec2_elb.create_target_group(
    Name='app5000-tg',
    Protocol='HTTP',
    Port=5000,
    VpcId=vpc_id,
    TargetType='instance'
)['TargetGroups'][0]['TargetGroupArn']

tg_5001 = ec2_elb.create_target_group(
    Name='app5001-tg',
    Protocol='HTTP',
    Port=5001,
    VpcId=vpc_id,
    TargetType='instance'
)['TargetGroups'][0]['TargetGroupArn']

# Register EC2 instance to both target groups
ec2_elb.register_targets(TargetGroupArn=tg_5000, Targets=[{'Id': instance_id}])
ec2_elb.register_targets(TargetGroupArn=tg_5001, Targets=[{'Id': instance_id}])

# ALB Listener with 50-50 weighted forwarding
ec2_elb.create_listener(
    LoadBalancerArn=alb_arn,
    Protocol='HTTP',
    Port=80,
    DefaultActions=[{
        'Type': 'forward',
        'ForwardConfig': {
            'TargetGroups': [
                {'TargetGroupArn': tg_5000, 'Weight': 50},
                {'TargetGroupArn': tg_5001, 'Weight': 50}
            ]
        }
    }]
)

# Get ALB DNS name
alb_dns = ec2_elb.describe_load_balancers(LoadBalancerArns=[alb_arn])['LoadBalancers'][0]['DNSName']

print(f"\n‚úÖ Application Load Balancer DNS: http://{alb_dns}/")
print("üí° Traffic split 50-50 between App 1 (5000) and App 2 (5001)")
print(f"üîê SSH Access: ssh -i {key_file_name} ubuntu@<EC2-Public-IP>")
